<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>GENERAL Introduction to GPU Programming</title>
    <link href="/2025/GENERAL-Introduction-to-GPU-Programming/"/>
    <url>/2025/GENERAL-Introduction-to-GPU-Programming/</url>
    
    <content type="html"><![CDATA[<h2 id="1-What-is-GPU"><a href="#1-What-is-GPU" class="headerlink" title="1. What is GPU?"></a>1. What is GPU?</h2><h2 id="2-Why-GPUs"><a href="#2-Why-GPUs" class="headerlink" title="2. Why GPUs?"></a>2. Why GPUs?</h2><h2 id="3-What-is-GPU-Programming"><a href="#3-What-is-GPU-Programming" class="headerlink" title="3. What is GPU Programming?"></a>3. What is GPU Programming?</h2><h2 id="4-GPU-Programming-models"><a href="#4-GPU-Programming-models" class="headerlink" title="4. GPU Programming models"></a>4. GPU Programming models</h2><h2 id="5-Summary"><a href="#5-Summary" class="headerlink" title="5. Summary"></a>5. Summary</h2><h2 id="6-Useful-links-and-references"><a href="#6-Useful-links-and-references" class="headerlink" title="6. Useful links and references:"></a>6. Useful links and references:</h2>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>GPU Programming</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PRACTICAL Introduction to Python Virtual Environment</title>
    <link href="/2025/PRACTICAL-Introduction-to-Python-Virtual-Environment/"/>
    <url>/2025/PRACTICAL-Introduction-to-Python-Virtual-Environment/</url>
    
    <content type="html"><![CDATA[<blockquote><p>If you just start your project using python for programming and data analysis, you might come to a common problem for beginners — why your project no longer runs after working on something else for a while. You may also not know where your python packages are stored or how to manage different versions of python between projects. Well, give a sigh of relief, virtual environments have come to the rescue.</p></blockquote><blockquote><p>In this blogpost, I will delve into the significance of Python virtual environments, providing a step-by-step tutorial on how to create and activate the virtual environment using Python’s <code>venv</code> module and then install packges. I will also describe how to export the installed packages with their specific versions so as to recreate the same Python virtural environment.</p></blockquote><h2 id="1-Python-Virtual-Environments"><a href="#1-Python-Virtual-Environments" class="headerlink" title="1. Python Virtual Environments"></a>1. Python Virtual Environments</h2><p>Python is a powerful programming language that offers flexibility and efficiency, and now it has been used in a variety of applications, including web development, machine learning, and scientific computing. One of the most significant features of Python is its ability to install and use packages, which extend the functionality of this language. However, managing packages and their dependencies are quite complex, especially when working on multiple projects that require different versions of the same packages. This is where virtual environments come into play.</p><p>A Python virtual environment is a self-contained space where you can run Python code and manage its dependencies, libraries, and configurations separately from the system-wide Python installation. This isolation allows you to work on different projects with different requirements without worrying about conflicts between them. Each virtual environment has its own set of installed packages and can be activated or deactivated as needed.</p><p>There are several reasons why you might want to use a virtual environments in your Python projects:</p><ul><li><strong>Isolation</strong>: A virtual environment provides an isolated environment for the project, ensuring that the dependencies for this project don’t interfere with those for the other projects.</li><li><strong>Dependency management</strong>: The virtual environment allows you to install, upgrade, or remove packages without affecting the global Python installation, making it easier to manage project-specific dependencies.</li><li><strong>Portability</strong>: A virtual environment encapsulates all dependencies within a project folder, making it easy to share projects with others without worrying about conflicting dependencies.</li></ul><h2 id="2-Creating-A-Python-Virtual-Environment"><a href="#2-Creating-A-Python-Virtual-Environment" class="headerlink" title="2. Creating A Python Virtual Environment"></a>2. Creating A Python Virtual Environment</h2><p>There are two primary tools available for creating a Python virtual environments: <code>virtualenv</code> and <code>venv</code>. These tools are essentially interchangeable, but they have slight differences in their compatibility and installation methods.</p><ul><li><code>Virtualenv</code> supports older versions of Python and must be installed using the <code>pip</code> command.</li><li><code>venv</code> is integrated into Python 3.3 and above as part of the standard library, eliminating the need for separate installation.</li></ul><p>Here I will walk through the process of creating a Python virtual environment using <code>venv</code>. </p><h3 id="2-1-Create-a-project-folder"><a href="#2-1-Create-a-project-folder" class="headerlink" title="2.1 Create a project folder"></a>2.1 Create a project folder</h3><p>First, we need to create a project folder to contain your project files and the virtual environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mkdir</span> project_A<br>$ <span class="hljs-built_in">cd</span> project_A<br></code></pre></td></tr></table></figure><h3 id="2-2-Create-a-Python-virtual-environment"><a href="#2-2-Create-a-Python-virtual-environment" class="headerlink" title="2.2 Create a Python virtual environment"></a>2.2 Create a Python virtual environment</h3><p>Use the <code>venv</code> module to create a Python virtual environment inside your project folder.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ python3 -m venv venv_4_Proj_A<br></code></pre></td></tr></table></figure><p>The <code>-m</code> flag is necessary because we’re running the <code>venv</code> module as a script. This command should generate a folder <code>venv_4_Proj_A</code>, which contains the Python virtual environment.</p><p>Running the <code>tree -L 2</code> command inside this folder will show the file structures in the <code>venv_4_Proj_A/</code> folder.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">cd</span> venv_4_Proj_A/<br>$ tree -L 2<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs vim">.<br>├── bin<br>│   ├── Activate.ps1<br>│   ├── activate<br>│   ├── activate.csh<br>│   ├── activate.fish<br>│   ├── pip<br>│   ├── pip3<br>│   ├── pip3.<span class="hljs-number">10</span><br>│   ├── <span class="hljs-keyword">python</span> -&gt; <span class="hljs-keyword">python3</span><br>│   ├── <span class="hljs-keyword">python3</span> -&gt; /Users/<span class="hljs-symbol">&lt;NAME&gt;</span>/anaconda3/bin/<span class="hljs-keyword">python3</span><br>│   └── <span class="hljs-keyword">python3</span>.<span class="hljs-number">10</span> -&gt; <span class="hljs-keyword">python3</span><br>├── include<br>├── lib<br>│   └── <span class="hljs-keyword">python3</span>.<span class="hljs-number">10</span><br>│       └── site-packages<br>└── pyvenv.cfg<br></code></pre></td></tr></table></figure><p>The most important things in this folder are the <code>site-packages</code> sub-folder within <code>lib</code> and the <code>activate</code> scripts within <code>bin</code> directories.</p><ul><li><code>site-packages</code> is the place where all third-party packages you install will be stored</li><li><code>activate</code> is the script that you should run before using the Python virtual environment.</li></ul><h3 id="2-3-Activate-the-Python-virtual-environment"><a href="#2-3-Activate-the-Python-virtual-environment" class="headerlink" title="2.3 Activate the Python virtual environment"></a>2.3 Activate the Python virtual environment</h3><p>To activate the Python virtual environment, you should run the command:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">source</span> bin/activate<br>(venv_4_Proj_A) (base) <br></code></pre></td></tr></table></figure><p>After activation, the Python virtual environment’s name (here it is <code>venv_4_Proj_A</code>) will appear below the command, indicating that you are now working inside the Python virtual environment.</p><p><img src="/img/python-virtual-environment/1-activate.jpg"></p><p>We can verify this by checking the version of Python and where it is stored via the command below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">which</span> python3<br></code></pre></td></tr></table></figure><p>This should display something like this:<br><img src="/img/python-virtual-environment/2-python-version.jpg"></p><p>Two notes should be addressed here:</p><ul><li>the version of <code>Python3</code> being referenced here is the one within the Python virtual environment. Any packages and libraries installed with the <code>pip</code> command should be contained within this virtual environment, and inaccessible outside of it.</li><li>we should distinguish between a Python project folder and a Python virtual environment folder.<ul><li>the project folder holds the source code for your project, while the virtual environment folder contains the Python interpreter, packages, and tools (that is why I created a folder <code>venv_4_Proj_A</code> to store everything relevant to the virtual environment).</li><li>to maintain clarity and organization, it’s <strong>highly recommanded</strong> to keep these two folders separate and never mix your project files within the virtual environment folder.</li></ul></li></ul><h2 id="3-Installing-Packages-in-A-Python-Virtual-Environment"><a href="#3-Installing-Packages-in-A-Python-Virtual-Environment" class="headerlink" title="3. Installing Packages in A Python Virtual Environment"></a>3. Installing Packages in A Python Virtual Environment</h2><p>Inside the Python virtual environment, you can install packages using <code>pip</code>, which is the package installer for Python.</p><p>Before installing any packages or libraries, let’s check the pre-installed packages after we created the Python virtual environment.</p><h3 id="3-1-Check-pre-installed-packages"><a href="#3-1-Check-pre-installed-packages" class="headerlink" title="3.1 Check pre-installed packages"></a>3.1 Check pre-installed packages</h3><p>Running the command below we can get a list of the pre-installed packages as shown below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip list<br></code></pre></td></tr></table></figure><p><img src="/img/python-virtual-environment/3-1st-pip-list.jpg"></p><p>Sometimes you might get the output info like <code>[notice] A new release of pip available.</code>. If so, you can upgrade <code>pip</code> to the latest version via running the command.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip install --upgrade pip<br></code></pre></td></tr></table></figure><h3 id="3-2-Install-Python-packages"><a href="#3-2-Install-Python-packages" class="headerlink" title="3.2 Install Python packages"></a>3.2 Install Python packages</h3><p>Running the command below to install three packages (<code>numpy</code>, <code>pandas</code>, and <code>matplotlib</code>) inside the Python virtual environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip install numpy pandas matplotlib<br></code></pre></td></tr></table></figure><p>This should display something like this:<br><img src="/img/python-virtual-environment/4-install-packages.jpg"></p><p>If you want to install a specific version of a package, such as the version 2.2.0 for pandas, you should specify the version number of this package in the command line.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip install pandas==2.2.0<br></code></pre></td></tr></table></figure><p>You can also install a range of versions using comparison operators.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip install <span class="hljs-string">&#x27;pandas&lt;2.2&#x27;</span><br></code></pre></td></tr></table></figure><p>After the installation of three packaged mentioned above, we will get the updated list of the all installed packages and their specific versions via the command below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip list<br></code></pre></td></tr></table></figure><p><img src="/img/python-virtual-environment/5-2nd-pip-list.jpg"></p><h2 id="4-Reproducing-A-Python-Virtual-Environment"><a href="#4-Reproducing-A-Python-Virtual-Environment" class="headerlink" title="4. Reproducing A Python Virtual Environment"></a>4. Reproducing A Python Virtual Environment</h2><p>It’s common to reproduce a Python virtual environment to ensure consistency across different development environments or group members.</p><h3 id="4-1-Freeze-dependencies"><a href="#4-1-Freeze-dependencies" class="headerlink" title="4.1 Freeze dependencies"></a>4.1 Freeze dependencies</h3><p>You can export a list of all installed packages along with their versions to a requirements file using the command below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ pip freeze &gt; requirements.txt<br></code></pre></td></tr></table></figure><p>This command creates a <code>requirements.txt</code> file containing all the packages and their exact versions as shown below.</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs text">contourpy==1.3.1<br>cycler==0.12.1<br>fonttools==4.55.3<br>kiwisolver==1.4.8<br>matplotlib==3.10.0<br>numpy==2.2.1<br>packaging==24.2<br>pandas==2.2.3<br>pillow==11.0.0<br>pyparsing==3.2.1<br>python-dateutil==2.9.0.post0<br>pytz==2024.2<br>six==1.17.0<br>tzdata==2024.2<br></code></pre></td></tr></table></figure><h3 id="4-2-Recreate-the-Python-virtual-environment-from-the-requirements-txt-file"><a href="#4-2-Recreate-the-Python-virtual-environment-from-the-requirements-txt-file" class="headerlink" title="4.2 Recreate the Python virtual environment from the requirements.txt file"></a>4.2 Recreate the Python virtual environment from the <code>requirements.txt</code> file</h3><p>You can distribute the <code>requirements.txt</code> file to your group members, and they can later use this file to recreate the same Python virtual environment and install all packages listed in the <code>requirements.txt</code> file via the commands below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">mkdir</span> project_B/<br>$ <span class="hljs-built_in">cd</span> project_B/<br>$ python3 -m venv venv_4_Proj_B/<br>$ <span class="hljs-built_in">source</span> venv_4_Proj_B/bin/activate<br>$ pip install -r requirements.txt<br></code></pre></td></tr></table></figure><h2 id="5-Deactivating-and-Deleting-A-Python-Virtual-Environment"><a href="#5-Deactivating-and-Deleting-A-Python-Virtual-Environment" class="headerlink" title="5. Deactivating and Deleting A Python Virtual Environment"></a>5. Deactivating and Deleting A Python Virtual Environment</h2><p>Once you are done working with your Python virtual environment, you can deactivate it or delete it.</p><p>Running the command below returns you to the system-wide Python environment.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ deactivate<br></code></pre></td></tr></table></figure><p>To delete the Python virtual environment, simply remove its directory.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">rm</span> -rf project_A/venv_4_Proj_A<br></code></pre></td></tr></table></figure><h2 id="6-Summary"><a href="#6-Summary" class="headerlink" title="6. Summary"></a>6. Summary</h2><p>Python virtual environments are essential for managing dependencies and preventing conflicts between projects. By creating isolated environments for each project, you can ensure that each application has its specific packages and versions. This enables you to maintain a clear and efficient development environment, allowing you to focus on building great software without worrying about dependency conflicts.</p><blockquote><p>Besides using <code>venv</code> module, you can also use other methods (<strong>virtualenv</strong>, <strong>pipenv</strong>,<strong>conda</strong>, <em>etc.</em>) to create the Python virtual environment. You can refer to this <a href="https://medium.com/@sunnykumar1516/ways-to-create-python-environment-a48c2abb15ff">WEBPAGE</a> for more details. </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Programming</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>venv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JULIA vs Python: Features and Differences</title>
    <link href="/2024/JULIA-vs-Python-Features-and-Differences/"/>
    <url>/2024/JULIA-vs-Python-Features-and-Differences/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>BUILD Personal Website with Hexo and GitHub Pages</title>
    <link href="/2024/BUILD-Personal-Website-with-Hexo-and-GitHub-Pages/"/>
    <url>/2024/BUILD-Personal-Website-with-Hexo-and-GitHub-Pages/</url>
    
    <content type="html"><![CDATA[<h2 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1. Introduction"></a>1. Introduction</h2><p>It has been a long time since I would like to own a particular space to record my work and enjoy my hobby of writting, and until now I’ve finally started creating my personal website here. Among a variety of schemes, I adopt <code>Hexo</code> + <code>GitHub Pages</code>, which is friendly to noob like me.</p><p>Hexo is a fast, simple &amp; powerful blog framework. Simply write post in Markdown and Hexo generates static files deployed to GitHub Pages. </p><p>As the first post, I am writing this article just in case anyone who is also interested in having a personal website but hasn’t been prepared yet. On the other hand, it will be an importent reference for myself to re-create the environment efficiently when I change the Mac or migrate data in the future.</p><h2 id="2-Environment-setup"><a href="#2-Environment-setup" class="headerlink" title="2. Environment setup"></a>2. Environment setup</h2><h3 id="2-1-Install-Node-js-locally"><a href="#2-1-Install-Node-js-locally" class="headerlink" title="2.1 Install Node.js locally"></a>2.1 Install <code>Node.js</code> locally</h3><p><code>Node.js</code> is a free, open-source, cross-platform (Mac OS, Window, Linux), and JavaScript runtime environment that lets developers create servers, web apps, command line tools and scripts.</p><p>Navigate to Node.js <a href="https://nodejs.org/en">webpage</a> and select the appropriate installation file to download according to your local environment.</p><ul><li>For Windows and Mac OS users, click the installer file to install it.</li><li>For Linux users, the installation is somewhat complicated. The following two installation methods are recommended, and you can choose one of them:<ul><li>Compile and install from source code without configuring bash, but compiling takes time, see the <a href="https://cloud.tencent.com/developer/article/1938607">reference</a></li><li>Download and install the binary file, you need to configure the bash environment, see the <a href="https://cloud.tencent.com/developer/article/1772306">reference</a></li></ul></li></ul><p>After the installation is complete, enter the following commands in the terminal:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$ npm -v<br>$ node -v<br></code></pre></td></tr></table></figure><p>If there are output with version numbers, the installation of Node.js is successful in your local computer.</p><h3 id="2-2-Install-Git"><a href="#2-2-Install-Git" class="headerlink" title="2.2 Install Git"></a>2.2 Install Git</h3><p>Git is a distributed version control system that tracks versions of files. It is often used to control source code by programmers who are developing software collaboratively.</p><p>If you are not familiar with Git, or you have heard of Git but want to know more about it, you can come to the lesson materials from <a href="https://coderefinery.org/">CodeRefinery</a></p><ul><li><a href="https://coderefinery.github.io/git-intro/">Introduction to version control with Git</a></li><li><a href="https://coderefinery.github.io/git-collaborative/">Collaborative distributed version control</a></li></ul><p>Following the instructions <a href="https://github.com/git-guides/install-git">HERE</a> to install Git.</p><p>After the installation, right-click the mouse anywhere on your desktop or in a folder. If you see the following options:</p><ul><li><code>Open Git GUI here</code></li><li><code>Open Git Bash here</code></li></ul><p>then Git has been successfully installed on your computer.</p><h3 id="2-3-Install-Hexo"><a href="#2-3-Install-Hexo" class="headerlink" title="2.3 Install Hexo"></a>2.3 Install Hexo</h3><p>Hexo is a fast, simple, and powerful blogging framework powered by Node.js. It allows users to create static websites, blogs, or portfolios with minimal setup. Hexo uses Markdown files for content, which makes it easy to write posts, and it generates static HTML files, which makes it fast for hosting.</p><p>Moreover, Hexo provides many <a href="https://hexo.io/docs/themes">themes</a> that you can easily integrate to your blog with a full of customization.</p><p>Once Node.js and Git are successfully installed, you can use npm (Node Package Manager) to install Hexo:</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">$ npm <span class="hljs-keyword">install</span> -g hexo-cli<br>$ npm <span class="hljs-keyword">install</span> hexo<br></code></pre></td></tr></table></figure><h3 id="2-4-Initialize-Hexo"><a href="#2-4-Initialize-Hexo" class="headerlink" title="2.4 Initialize Hexo"></a>2.4 Initialize Hexo</h3><p>Once Hexo is installed, run the following commands to initialize Hexo in the target <code>&lt;my-website&gt;</code>.</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> hexo init &lt;my<span class="hljs-literal">-website</span>&gt;<br><span class="hljs-variable">$</span> <span class="hljs-built_in">cd</span> &lt;my<span class="hljs-literal">-website</span>&gt;<br><span class="hljs-variable">$</span> npm install<br></code></pre></td></tr></table></figure><p>This will creates a new directory (<code>&lt;my-website&gt;</code>) with the default&#x2F;essential structure of a Hexo site and installs the required dependencies. Your project folder will look like:</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs 1c">.<br>├── _config.yml<br>├── package.json<br>├── scaffolds<br>├── source<br><span class="hljs-string">|   ├── _drafts</span><br><span class="hljs-string">|   └── _posts</span><br>└── themes<br></code></pre></td></tr></table></figure><ul><li>The <code>_config.yml</code> is the “site config” file in Hexo root dict, personalize the top contents like <code>title</code>, <code>subtitle</code>, <code>author</code>, <code>description</code> and other global settings.</li><li>The <code>package.json</code> file contains the application data. The <a href="https://ejs.co/">EJS</a>, <a href="https://stylus-lang.com/">Stylus</a> and <a href="https://daringfireball.net/projects/markdown/">Markdown</a> renderers are installed by default.</li><li>Scaffold folder: When you create a new post, Hexo bases the new file on the scaffold.</li><li>Source folder: This is where you put your site’s content. Hexo ignores hidden files and files or folders whose names are prefixed with _ (underscore) - except the _posts folder. Renderable files (e.g. Markdown, HTML) will be processed and put into the public folder, while other files will simply be copied.</li><li>Theme folder: Hexo generates a static website by combining the site contents with the theme.</li></ul><p>Run the following basic commands to compile Hexo</p><ul><li><code>hexo clean</code> to clear the static files and cache</li><li><code>hexo g</code> to generate static web files locally</li><li><code>hexo s</code> to start a local sever for preview<ul><li>Hexo will be run at <code>localhost:4000</code> by default. Now open <code>http://localhost:4000</code> in your browser to see the result. </li><li><img src="/img/hexo-githubpage/hexo-s.jpg" alt="hexo-s"></li></ul></li><li><code>hexo d</code> to deploy after generation finish (will talk this part in the following section)</li></ul><hr><h2 id="3-Customize-Hexo-theme"><a href="#3-Customize-Hexo-theme" class="headerlink" title="3. Customize Hexo theme"></a>3. Customize Hexo theme</h2><p>The Hexo community provides a lot of themes that you can choose to personalize your website. Navigate to the <a href="https://hexo.io/themes/">Hexo themes</a> and select one to make your website attractive and professional.</p><p>Personally, I like <a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>, an elegant Material-Design theme, particularly for writing posts. If you prefer the other themes, the configuration method should be similar.</p><ul><li>Download Fluid theme and then the <code>_config.fluid.yml</code> file in root dict is created for custom.<figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-theme-fluid</span><br></code></pre></td></tr></table></figure></li><li>Modify <code>_config.yml</code> in root dict via replacing the theme config with your new theme name.<figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-meta"># Extensions</span><br><span class="hljs-symbol">theme:</span> fluid<br></code></pre></td></tr></table></figure></li></ul><p>Run the command <code>hexo s</code> again and open the <code>http://localhost:4000</code> in your browser to see the result using the Fluid theme. </p><p><img src="/img/hexo-githubpage/hexo-fluid-theme.jpg" alt="hexo-fluid-theme"></p><p>For more configuration, please refer to <a href="https://hexo.fluid-dev.com/docs/en/start/">Hexo Fluid Docs</a>.</p><hr><h2 id="4-Personalize-domain"><a href="#4-Personalize-domain" class="headerlink" title="4. Personalize domain"></a>4. Personalize domain</h2><p><a href="https://docs.github.com/en/pages/getting-started-with-github-pages/about-github-pages#about-github-pages">GitHub Pages</a> is a static site hosting service that takes HTML, CSS, and JavaScript files straight from a repository on GitHub, optionally runs the files through a build process, and publishes a website.</p><p>To publish a user site, we can follow the <a href="https://pages.github.com/">getting started instructions</a> to set up your site using GitHub Pages.</p><h3 id="4-1-Create-a-GitHub-Pages-repository"><a href="#4-1-Create-a-GitHub-Pages-repository" class="headerlink" title="4.1 Create a GitHub Pages repository"></a>4.1 Create a GitHub Pages repository</h3><p>We should create a repository on GitHub.</p><ul><li>In the upper-right corner of any page of your Github account, select <code>+</code>, then click <code>New repository</code><ul><li><img src="/img/hexo-githubpage/github-new-repository.jpg" alt="github-new-repository"></li></ul></li><li>Enter <code>&lt;username&gt;.github.io</code> as the repository name. For example, if your username is octocat, the repository name should be <code>octocat.github.io</code>. This link will end up being the base URL of your website.<ul><li><img src="/img/hexo-githubpage/github-repo-name.jpg" alt="github-repo-name"></li></ul></li><li>Choose a repository visibility (<code>Public</code> or <code>Private</code>).</li><li>Select <code>Initialize this repository with a README</code>.</li><li>Click <code>Create repository</code>.</li></ul><h3 id="4-2-Generate-a-SSH-key"><a href="#4-2-Generate-a-SSH-key" class="headerlink" title="4.2 Generate a SSH key"></a>4.2 Generate a SSH key</h3><p>You can generate a new SSH key on your local machine. After you generate the key, you can add the public key to your account on GitHub.com to enable authentication for Git operations over SSH.</p><ul><li>Open Git Bash.</li><li>Paste the text below, replacing <code>&lt;your_email&gt;</code> with your GitHub email address.  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t ed25519 -C <span class="hljs-string">&quot;&lt;your_email&gt;&quot;</span><br></code></pre></td></tr></table></figure><ul><li>When you’re prompted to “Enter file in which to save the key (&#x2F;c&#x2F;Users&#x2F;XXX&#x2F;.ssh&#x2F;id_ed25519):”, you can press Enter to accept the default file location.</li><li>Please note that if you created SSH keys previously, ssh-keygen may ask you to rewrite another key, in which case we recommend creating a custom-named SSH key.</li></ul></li><li>Type a secure passphrase when you see the following output at the prompt:  <figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ada">&gt; Enter passphrase (empty <span class="hljs-keyword">for</span> no passphrase): [<span class="hljs-keyword">Type</span> <span class="hljs-type">a </span>passphrase]<br>&gt; Enter same passphrase again: [<span class="hljs-keyword">Type</span> <span class="hljs-type">passphrase </span>again]<br></code></pre></td></tr></table></figure></li></ul><h3 id="4-3-Add-the-SSH-key-to-your-Github-account"><a href="#4-3-Add-the-SSH-key-to-your-Github-account" class="headerlink" title="4.3 Add the SSH key to your Github account"></a>4.3 Add the SSH key to your Github account</h3><p>You can add the generated SSH key and use it for authentication, or commit signing, or both. </p><ul><li>Copy the SSH public key to your clipboard.</li><li>In the upper-right corner of any page on GitHub, click your profile photo, then click <code>Settings</code>.<ul><li><img src="/img/hexo-githubpage/github-global-setting.jpg" alt="github-global-setting"></li></ul></li><li>In the <code>Access</code> section of the sidebar, click <code>SSH and GPG keys</code>.<ul><li><img src="/img/hexo-githubpage/github-ssh-key.jpg" alt="github-ssh-key"></li></ul></li><li>Click the green button with the name of <code>New SSH key</code> or <code>Add SSH key</code><ul><li><img src="/img/hexo-githubpage/github-new-ssh.jpg" alt="github-new-ssh"></li></ul></li><li>In the “Title” field, add a descriptive label for the ssh key.</li><li>Select the type of key, either <code>Authentication Key</code> or <code>Signing Key</code>.</li><li>Paste your public key in the “Key” field.</li><li>Click <code>Add SSH key</code>.<ul><li><img src="/img/hexo-githubpage/github-add-ssh-key.jpg" alt="github-add-ssh-key"></li></ul></li><li>GitHub will prompt you to enter your password for confirmation.</li><li>Test your SSH connection via Git Bash prompt (windows users) and terminal (Mac OS and Linux users)<ul><li>Enter the command <code>ssh -T git@github.com</code></li><li>You may see a warning like this:  <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">The</span> authenticity <span class="hljs-keyword">of</span> host <span class="hljs-string">&#x27;github.com (IP ADDRESS)&#x27;</span> can<span class="hljs-string">&#x27;t be established.</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">ED25519 key fingerprint is SHA256:+(XXXXX).</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-string">Are you sure you want to continue connecting (yes/no)?</span></span><br></code></pre></td></tr></table></figure></li><li>Verify the fingerprint in this message matches GitHub’s public key fingerprint. If it does, then type yes and you will theoretically get   <figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Hi</span> <span class="hljs-variable constant_">USERNAME</span>! <span class="hljs-title class_">You</span><span class="hljs-string">&#x27;ve successfully authenticated.</span></span><br></code></pre></td></tr></table></figure></li><li>If you receive a “permission denied” message, you can come to the <a href="https://docs.github.com/en/authentication/troubleshooting-ssh/error-permission-denied-publickey">Error: Permission denied (publickey)</a> webpage to see how to solve this problem.</li></ul></li></ul><h3 id="4-4-Update-config-yml-in-root-dict"><a href="#4-4-Update-config-yml-in-root-dict" class="headerlink" title="4.4 Update _config.yml in root dict"></a>4.4 Update <code>_config.yml</code> in root dict</h3><p>As we have adopted the <code>Fluid</code> theme in the <code>_config.yml</code> file, we scroll down to the bottom of this file and update it with your depolyment target information.</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">main</span><br></code></pre></td></tr></table></figure><p>At the root dict, right-click the mouse and click <code>Open Git Bash Here</code> and then run the following basic commands</p><ul><li><code>hexo clean</code> to clear the static files and cache</li><li><code>hexo g &amp;&amp; hexo s</code> to generate static web files locally and then to start a local sever at <code>http://localhost:4000/</code> for preview</li><li><code>hexo d</code> to deploy once you can make sure that all the info at <code>http://localhost:4000/</code> are correct<ul><li>your depolyment will be successful if you see the output <code>INFO  Deploy done: git</code></li><li>If there is an error info like <code>ERROR Deployer not found: git</code>, run the command <code>npm install hexo-deployer-git --save</code> and regenerate and redepoly your materials via   <figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">hexo clean &amp;&amp; hexo <span class="hljs-keyword">generate</span><br>hexo deploy<br></code></pre></td></tr></table></figure></li></ul></li></ul><h3 id="4-5-Update-GitHub-repository"><a href="#4-5-Update-GitHub-repository" class="headerlink" title="4.5 Update GitHub repository"></a>4.5 Update GitHub repository</h3><ul><li>Come to the Github repository for your personal website, which should be <code>https://github.com/&lt;username&gt;/&lt;username&gt;.github.io</code>, and then the <code>Settings</code> at upper part of your web brower.</li><li>In the <code>Code and automation</code> section of the sidebar, click <code>Pages</code>.<ul><li>In the <code>Build and deployment/Source</code> section, you should choose <code>Deploy from a branch</code></li><li>Select <code>main/(root)</code> at the <code>Branch</code> section and <code>save</code> it</li></ul></li><li>Wait for several minutes and you will see the URL for your personal website.<ul><li>if you have your own custom domain, you can follow the instructions <a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site">HERE</a> and add it to GitHub Pages</li></ul></li></ul><p><img src="/img/hexo-githubpage/github-depolyment.jpg" alt="github-depolyment"></p><h3 id="4-6-Create-a-new-post"><a href="#4-6-Create-a-new-post" class="headerlink" title="4.6 Create a new post"></a>4.6 Create a new post</h3><p>At the root dict of Hexo project (<code>&lt;my-website&gt;</code>), right-click the mouse and click <code>Open Git Bash Here</code></p><ul><li>run the command <code>hexo new &quot;NEW hello world&quot;</code> and it will create a new file (<code>NEW-hello-world.md</code>) in <code>&lt;PATH&gt;/source/_posts/&gt;</code> with some default front-matter.</li><li>Edit this file and add content to your post with basic <a href="https://www.markdownguide.org/basic-syntax/">Markdown Syntax</a>.</li><li>run the Hexo commands mentioned above to generate static HTML files and then depoly these new files to Github Page.</li></ul><p>After deployment, visit <code>https://&lt;username&gt;.github.io</code> to see your live site.</p><p><img src="/img/hexo-githubpage/new-hello-world.jpg"></p><hr><h2 id="5-Summary"><a href="#5-Summary" class="headerlink" title="5. Summary"></a>5. Summary</h2><p>Using GitHub Pages to build a personal website and distinguish yourself with a recognizable identity and external brand in your communities of interest is a worthwhile endeavor if you’re willing to spend some extra time setting things up.<br>Hexo and Github Page become such a great tool for you.<br>This pairing is a convenient, performant and free blogging platform.<br>With its simplicity and its community, it’s easy to set up, allowing you to just focus on what matters: Your sharing.<br>I hope you find this post useful.</p>]]></content>
    
    
    <categories>
      
      <category>Website</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>Github Pages</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NEW hello world</title>
    <link href="/2024/NEW-hello-world/"/>
    <url>/2024/NEW-hello-world/</url>
    
    <content type="html"><![CDATA[<h1 id="This-is-another-blogpost"><a href="#This-is-another-blogpost" class="headerlink" title="This is another blogpost"></a>This is another blogpost</h1><h2 id="1-Horizontal-Rules"><a href="#1-Horizontal-Rules" class="headerlink" title="1. Horizontal Rules"></a>1. Horizontal Rules</h2><hr><hr><h2 id="2-Typographic-replacements"><a href="#2-Typographic-replacements" class="headerlink" title="2. Typographic replacements"></a>2. Typographic replacements</h2><p>Enable typographer option to see result.</p><p>(c) (C) (r) (R) (tm) (TM) (p) (P) +-</p><p>test.. test… test….. test?….. test!….</p><p>“Smartypants, double quotes” and ‘single quotes’</p><h2 id="3-Emphasis"><a href="#3-Emphasis" class="headerlink" title="3. Emphasis"></a>3. Emphasis</h2><p><strong>This is bold text</strong></p><p><em>This is italic text</em></p><p><del>Strikethrough</del></p><h2 id="4-Blockquotes"><a href="#4-Blockquotes" class="headerlink" title="4. Blockquotes"></a>4. Blockquotes</h2><blockquote><p>Blockquotes can also be nested…</p></blockquote><h2 id="5-Lists"><a href="#5-Lists" class="headerlink" title="5. Lists"></a>5. Lists</h2><p>Unordered</p><ul><li>Create a list by starting a line with <code>+</code>, <code>-</code>, or <code>*</code></li><li>Sub-lists are made by indenting 2 spaces:<ul><li>Marker character change forces new list start:<ul><li>Ac tristique libero volutpat at</li></ul><ul><li>Facilisis in pretium nisl aliquet</li></ul><ul><li>Nulla volutpat aliquam velit</li></ul></li></ul></li><li>Very easy!</li></ul><p>Ordered</p><ol><li>Lorem ipsum dolor sit amet</li><li>Consectetur adipiscing elit</li><li>Integer molestie lorem at massa</li></ol><h2 id="6-Code"><a href="#6-Code" class="headerlink" title="6. Code"></a>6. Code</h2><p>Inline <code>code</code></p><p>Indented code</p><pre><code class="hljs">// Some commentsline 1 of codeline 2 of codeline 3 of code</code></pre><p>Block code “fences”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs conole">Sample text here...<br></code></pre></td></tr></table></figure><p>Syntax highlighting</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> foo = <span class="hljs-keyword">function</span> (<span class="hljs-params">bar</span>) &#123;<br>  <span class="hljs-keyword">return</span> bar++;<br>&#125;;<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title function_">foo</span>(<span class="hljs-number">5</span>));<br></code></pre></td></tr></table></figure><h2 id="7-Tables"><a href="#7-Tables" class="headerlink" title="7. Tables"></a>7. Tables</h2><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td>data</td><td>path to data files to supply data</td></tr><tr><td>ext</td><td>extension to be used for dest files</td></tr></tbody></table><p>Right aligned columns</p><table><thead><tr><th align="right">Option</th><th align="center">Description</th></tr></thead><tbody><tr><td align="right">data</td><td align="center">path to data files to supply data</td></tr><tr><td align="right">ext</td><td align="center">extension to be used for dest files</td></tr></tbody></table><h2 id="8-Links-and-Images"><a href="#8-Links-and-Images" class="headerlink" title="8. Links and Images"></a>8. Links and Images</h2><p><a href="http://dev.nodeca.com/">link text</a></p><p><img src="https://octodex.github.com/images/dojocat.jpg" alt="Dojocat"></p>]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HELLO World</title>
    <link href="/2024/HELLO-world/"/>
    <url>/2024/HELLO-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>Test</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Test</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
